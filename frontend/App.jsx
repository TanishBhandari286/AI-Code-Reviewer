import React, { useEffect, useState } from 'react'
import DarkModeWrapper from './DarkModeWrapper.jsx'
import BackgroundAnimation from './components/BackgroundAnimation.jsx'
import FeatureHighlights from './components/FeatureHighlights.jsx'
import HowItWorks from './components/HowItWorks.jsx'

const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:8000'

export default function App() {
  const [repo, setRepo] = useState('')
  const [reviewMode, setReviewMode] = useState('full')
  const [result, setResult] = useState(null)
  const [loading, setLoading] = useState(false)

  async function submitRepo(e) {
    e.preventDefault()
    setLoading(true)
    try {
      const r = await fetch(`${API_BASE}/review`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ repo, mode: reviewMode })
      })
      const data = await r.json()
      setResult(data)
    } catch (err) {
      setResult({ error: String(err) })
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => { /* placeholder for future */ }, [])

  return (
    <DarkModeWrapper>
      <main className="centered-root">
        <div className="brand">
          <div className="brand-logo" aria-hidden="true" />
          <h1 className="brand-title">GitHub Repo AI Reviewer</h1>
          <p className="brand-subtitle">Automated code feedback and PRs powered by AI</p>
          <div className="badge-ai">Generated by AI</div>
        </div>

        <section className="review-card">
          <h2 className="review-title">Submit a Repository for Review</h2>
          <p className="review-desc">Paste a GitHub URL and select review mode. We’ll open a PR with suggestions.</p>

          <form onSubmit={submitRepo}>
            <div className="form-row">
              <input
                className="input-lg"
                value={repo}
                onChange={e => setRepo(e.target.value)}
                placeholder="https://github.com/owner/repo"
                aria-label="GitHub repository URL"
              />
            </div>
            <div className="form-row select-row">
              <select className="select-lg" value={reviewMode} onChange={e => setReviewMode(e.target.value)} aria-label="Review mode">
                <option value="full">Full repository</option>
                <option value="recent">Recent changes</option>
                <option value="smart">Smart (AI-selected)</option>
              </select>
              <button className="submit-button" disabled={!repo || loading} type="submit">{loading ? 'Starting…' : 'Start Review'}</button>
            </div>
          </form>

          {result && (
            <div className="result">
              {result.error ? (
                <>Error: {String(result.error)}</>
              ) : (
                <>Submitted. Files reviewed: <b>{result.files_reviewed ?? '—'}</b> · <a href={result.pr_url} target="_blank" rel="noreferrer">Open PR</a></>
              )}
            </div>
          )}
        </section>
          {/* Decorative background animation behind sections */}
          <BackgroundAnimation />

          {/* Feature highlights */}
          <FeatureHighlights />

          {/* How it works timeline */}
          <HowItWorks />
      </main>
    </DarkModeWrapper>
  )
}
